/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * The unique identifier for this Paddle webhook alert. Integer value sent as a string.
 */
export type AlertID = string;
/**
 * The three letter ISO currency code of the vendor’s default currency at the time of the transaction. Eg: `USD`, `GBP`.
 */
export type BalanceCurrency = string;
/**
 * The checkout id of the order created.
 */
export type CheckoutID = string;
/**
 * The two-letter ISO country code of the customer. Eg: `US`, `GB`. See [Supported Countries](/reference/platform-parameters/supported-countries).
 */
export type Country = string;
/**
 * The coupon code that was used on this order
 */
export type Coupon = string;
/**
 * The three-letter ISO currency code. Eg: `USD`, `GBP`. See [Supported Currencies](/reference/platform-parameters/supported-currencies).
 */
export type Currency = string;
/**
 * The name of the customer. For card payments, this will return the cardholder name entered by the buyer during the checkout. For PayPal payments, this will return the name from the PayPal account used during the checkout. For all other payment methods where the name is not collected (including Apple Pay and Wire Transfer), this will be empty.
 */
export type CustomerName = string;
/**
 * The email address of the customer.
 */
export type Email = string;
/**
 * The date and time the event was triggered in UTC (Coordinated Universal Time).
 */
export type EventTime = string;
/**
 * The value of this field `0` or `1` indicates whether it is the customer’s first payment for this subscription.
 */
export type InitialPayment = 0 | 1;
/**
 * Number of payments made to date, starting from `1` for the customer's first payment. Integer sent as string.
 */
export type Instalments = string;
/**
 * The value of this field `0` or `1` indicates whether the user has agreed to receive marketing messages from the vendor.
 */
export type MarketingConsent = 0 | 1;
/**
 * The date the next payment is due on this subscription.
 */
export type NextBillDate = string;
/**
 * The Paddle Order ID for this payment. This can be used to look up the order within your Seller Dashboard.
 */
export type OrderID = string;
/**
 * This field contains any values that you passed into the checkout using the `passthrough` parameter. See the [Pass Parameters documentation](/guides/how-tos/checkout/pass-parameters#sending-additional-user-data) for more information.
 */
export type Passthrough = string;
/**
 * Payment method used to make the transaction.
 */
export type SubscriptionPaymentMethod = "card" | "paypal";
/**
 * The number of products or subscription seats sold in the transaction.
 */
export type Quantity = string;
/**
 * This is the current status of the subscription. A list of possible values and their meanings can be found under [Event Statuses](/reference/platform-parameters/event-statuses).
 */
export type Status = "active" | "trialing" | "past_due" | "paused" | "deleted";
/**
 * This is the unique Subscription ID for this customer’s subscription. You should store this with the customer in your database, as it is needed for making API calls.
 */
export type SubscriptionID = string;
/**
 * The unique ID of the subscription payment.
 */
export type SubscriptionPaymentID = string;
/**
 * The ID of the Subscription Plan the customer is subscribed to. (This is the value that will change upon plan change).
 */
export type SubscriptionPlanID = string;
/**
 * The price per unit of the subscription.
 */
export type UnitPrice = string;
/**
 * The customer user id.
 */
export type UserID = string;
/**
 * This field contains an encrypted token that you can use to verify the request authenticity. See [Verifying Webhooks](/webhook-reference/verifying-webhooks).
 */
export type PSignature = string;

/**
 * Identify this event with the HTTP POST parameter `alert_name` with a value of `subscription_payment_succeeded`
 */
export interface SubscriptionPaymentSucceeded {
  alert_name?: string;
  alert_id?: AlertID;
  balance_currency?: BalanceCurrency;
  /**
   * The amount of revenue added to the vendor’s balance as a result of this payment, in the vendor’s `balance_currency` at the time of the transaction.
   */
  balance_earnings?: string;
  /**
   * The fee amount taken from the vendor, in the vendor’s `balance_currency` at the time of the transaction.
   */
  balance_fee?: string;
  /**
   * The total amount received from the customer as a result of the payment, in the vendor’s `balance_currency` at the time of the transaction.
   */
  balance_gross?: string;
  /**
   * The amount of tax received from the customer, in the vendor’s `balance_currency` at the time of the transaction.
   */
  balance_tax?: string;
  checkout_id?: CheckoutID;
  country?: Country;
  coupon?: Coupon;
  currency?: Currency;
  customer_name?: CustomerName;
  /**
   * The total amount (after taxes and fees) you earned from this payment.
   */
  earnings?: string;
  email?: Email;
  event_time?: EventTime;
  /**
   * The total amount in Paddle fees for this payment.
   */
  fee?: string;
  initial_payment?: InitialPayment;
  instalments?: Instalments;
  marketing_consent?: MarketingConsent;
  next_bill_date?: NextBillDate;
  /**
   * The total amount that the customer will be charged for on their upcoming payment, in the subscription’s currency.
   */
  next_payment_amount?: string;
  order_id?: OrderID;
  passthrough?: Passthrough;
  payment_method?: SubscriptionPaymentMethod;
  /**
   * Amount of tax paid as a result of this payment.
   */
  payment_tax?: string;
  /**
   * Subscription plan name.
   */
  plan_name?: string;
  quantity?: Quantity;
  /**
   * URL containing the customer receipt.
   */
  receipt_url?: string;
  /**
   * The total amount the customer was charged for this payment. Decimal sent as string.
   */
  sale_gross?: string;
  status?: Status;
  subscription_id?: SubscriptionID;
  subscription_payment_id?: SubscriptionPaymentID;
  subscription_plan_id?: SubscriptionPlanID;
  unit_price?: UnitPrice;
  user_id?: UserID;
  p_signature?: PSignature;
  [k: string]: unknown;
}
