/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * The unique identifier for this Paddle webhook alert. Integer value sent as a string.
 */
export type AlertID = string;
/**
 * The three letter ISO currency code of the vendor’s default currency at the time of the transaction. Eg: `USD`, `GBP`.
 */
export type BalanceCurrency = string;
/**
 * The amount of revenue taken from the vendor’s balance as a result of this refund, in the vendor’s `balance_currency` at the time of the transaction. It returns a positive or negative value. Eg: If you issue a VAT-only refund, this will increase the vendor’s earnings instead of decreasing it, to reflect this we use a negative value. Please also note that if the earnings of the order being refunded are being split between vendors, the earnings decrease amount will not include the other vendor’s fee, only yours. (eg. If you are giving 15% of your earnings to another vendor and keeping 85%, your balance earnings will be reduced only by 85%).
 */
export type BalanceEarningsDecrease = string;
/**
 * The fee amount returned to the vendor, in the vendor’s `balance_currency` at the time of the transaction.
 */
export type BalanceFeeRefund = string;
/**
 * The total amount returned to the customer as a result of this refund, in the vendor’s `balance_currency` at the time of the transaction.
 */
export type BalanceGrossRefund = string;
/**
 * The amount of tax returned to the customer, in the vendor’s `balance_currency` at the time of the transaction.
 */
export type BalanceTaxRefund = string;
/**
 * The checkout id of the order created.
 */
export type CheckoutID = string;
/**
 * The three-letter ISO currency code. Eg: `USD`, `GBP`. See [Supported Currencies](/reference/platform-parameters/supported-currencies).
 */
export type Currency = string;
/**
 * The amount of revenue taken from the vendor’s earnings as a result of this refund, in the currency of the original transaction. It returns a positive or negative value. E.g: if you issue a VAT-only refund, this will increase the vendor’s earnings instead of decreasing it, to reflect this we use a negative value. Please also note that if the earnings of the order being refunded are being split between vendors, the earnings decrease amount will not include the other vendor’s fee, only yours: for example if you are giving 15% of your earnings to another vendor and keeping 85%, your balance earnings will only be reduced by 85%.
 */
export type EarningsDecrease = string;
/**
 * The email address of the customer.
 */
export type Email = string;
/**
 * The date and time the event was triggered in UTC (Coordinated Universal Time).
 */
export type EventTime = string;
/**
 * The fee amount returned to the vendor, in the currency of the original transaction.
 */
export type FeeRefund = string;
/**
 * The total amount returned to the customer as a result of this refund, in the currency of the original transaction.
 */
export type GrossRefund = string;
/**
 * The value of this field `0` or `1` indicates whether it is the customer’s first payment for this subscription.
 */
export type InitialPayment = 0 | 1;
/**
 * Number of payments made to date, starting from `1` for the customer's first payment. Integer sent as string.
 */
export type Instalments = string;
/**
 * The value of this field `0` or `1` indicates whether the user has agreed to receive marketing messages from the vendor.
 */
export type MarketingConsent = 0 | 1;
/**
 * The Paddle Order ID for this payment. This can be used to look up the order within your Seller Dashboard.
 */
export type OrderID = string;
/**
 * This field contains any values that you passed into the checkout using the `passthrough` parameter. See the [Pass Parameters documentation](/guides/how-tos/checkout/pass-parameters#sending-additional-user-data) for more information.
 */
export type Passthrough = string;
/**
 * The number of products or subscription seats sold in the transaction.
 */
export type Quantity = string;
/**
 * Refund reason note.
 */
export type RefundReason = string;
/**
 * The type of refund.
 */
export type RefundType = "full" | "vat" | "partial";
/**
 * This is the current status of the subscription. A list of possible values and their meanings can be found under [Event Statuses](/reference/platform-parameters/event-statuses).
 */
export type Status = "active" | "trialing" | "past_due" | "paused" | "deleted";
/**
 * This is the unique Subscription ID for this customer’s subscription. You should store this with the customer in your database, as it is needed for making API calls.
 */
export type SubscriptionID = string;
/**
 * The unique ID of the subscription payment.
 */
export type SubscriptionPaymentID = string;
/**
 * The ID of the Subscription Plan the customer is subscribed to. (This is the value that will change upon plan change).
 */
export type SubscriptionPlanID = string;
/**
 * The amount of tax returned to the customer, in the currency of the original transaction.
 */
export type TaxRefund = string;
/**
 * The price per unit of the subscription.
 */
export type UnitPrice = string;
/**
 * The customer user id.
 */
export type UserID = string;
/**
 * This field contains an encrypted token that you can use to verify the request authenticity. See [Verifying Webhooks](/webhook-reference/verifying-webhooks).
 */
export type PSignature = string;

/**
 * Identify this event with the HTTP POST parameter `alert_name` with a value of `subscription_payment_refunded`
 */
export interface SubscriptionPaymentRefunded {
  alert_name?: string;
  alert_id?: AlertID;
  /**
   * The amount refunded, partial refunds are possible. Decimal value sent as a string.
   */
  amount?: string;
  balance_currency?: BalanceCurrency;
  balance_earnings_decrease?: BalanceEarningsDecrease;
  balance_fee_refund?: BalanceFeeRefund;
  balance_gross_refund?: BalanceGrossRefund;
  balance_tax_refund?: BalanceTaxRefund;
  checkout_id?: CheckoutID;
  currency?: Currency;
  earnings_decrease?: EarningsDecrease;
  email?: Email;
  event_time?: EventTime;
  fee_refund?: FeeRefund;
  gross_refund?: GrossRefund;
  initial_payment?: InitialPayment;
  instalments?: Instalments;
  marketing_consent?: MarketingConsent;
  order_id?: OrderID;
  passthrough?: Passthrough;
  quantity?: Quantity;
  refund_reason?: RefundReason;
  refund_type?: RefundType;
  status?: Status;
  subscription_id?: SubscriptionID;
  subscription_payment_id?: SubscriptionPaymentID;
  subscription_plan_id?: SubscriptionPlanID;
  tax_refund?: TaxRefund;
  unit_price?: UnitPrice;
  user_id?: UserID;
  p_signature?: PSignature;
  [k: string]: unknown;
}
